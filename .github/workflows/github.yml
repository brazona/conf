
# Copyright 2024 Brazona Tech

##################################################################################################
# Detalhes do Serviço
##################################################################################################
# Pipeline que cria/atualiza os valores da conta do repositório de versionamento, github


name: Github Pipeline

on:
  pull_request:
    paths:
      - 'app/profile/core/github/**'
    branches:
      - 'main'
      - 'develop'
      - 'hotfix/**'
      - 'release/**'
  workflow_dispatch:
env:
  GITHUB_REPOSITORY: brazona/idp
jobs:
  #identifica as variaveis 
  identify:
    name: Call Identifier
    uses: ./.github/workflows/identifier.yml
    with:
      github_base_ref: ${{github.base_ref}}
      github_event_name: ${{github.event_name }}
      github_ref_name: ${{github.ref_name}}
  
  # Localiza o arquivo secret.yaml
  secret:
    name: Secret Search
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [identify]
    environment:
      name: ${{needs.identify.outputs.environment_name}}
    env:
      FILE_PATH: 'app/profile/core/github/dsv/secret.yaml'
    outputs:
      path: ${{ steps.envfile_search.outputs.envfile }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: File Env Homologation
      if: contains(needs.identify.outputs.github_env_file_field, 'HOMOLOGATION_ENV')
      run: |
        echo "FILE_PATH=app/profile/core/github/hmg/secret.yaml" >> $GITHUB_ENV
    - name: File Env Staging
      if: contains(needs.identify.outputs.github_env_file_field, 'STAGING_ENV')
      run: |
        echo "FILE_PATH=app/profile/core/github/stg/secret.yaml" >> $GITHUB_ENV
    - name: File Env Production
      if: contains(needs.identify.outputs.github_env_file_field, 'PRODUCTION_ENV')
      run: |
        echo "FILE_PATH=app/profile/core/github/prd/secret.yaml" >> $GITHUB_ENV
    - name: Out Envfile path
      id: envfile_search
      run: echo "envfile=${{ env.FILE_PATH }}" >> $GITHUB_OUTPUT

  # Aplica o deploy no ambiente k8s
  deploy-config:
    name: Deploy Configmap 
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [secret, identify]
    environment:
      name: ${{needs.identify.outputs.environment_name}}
    outputs:
      successful: ${{ steps.status.outputs.status }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set Kubernetes Context
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBECONFIG }}
    - name: Deploy to Cluster
      run: | 
        kubectl apply -f ${{needs.secret.outputs.path}}
    - name: Successful
      id: status
      run: echo "status=true" >> $GITHUB_OUTPUT    